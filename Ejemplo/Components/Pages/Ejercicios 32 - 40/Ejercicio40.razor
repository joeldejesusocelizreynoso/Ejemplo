@page "/Ejercicio40"
@rendermode InteractiveServer

<h3>Ejercicio 40: Cantidad de números que terminan en un dígito específico</h3>

<div>
    <label>Introduce 10 números separados por espacios:</label>
    <input @bind-value="numerosInput" @bind-value:event="oninput" type="text" placeholder="Ejemplo: 15 26 37 48 ..." />
</div>

<div>
    <label>Introduce un dígito (0-9):</label>
    <input @bind-value="digito" @bind-value:event="oninput" type="number" min="0" max="9" placeholder="Ejemplo: 3" />
</div>

<div>
    <button class="btn btn-outline-primary" @onclick="CalcularNumerosTerminadosEnDigito">Calcular</button>
    <button class="btn btn-outline-danger" @onclick="Limpiar">Limpiar</button>
</div>

<div>
    <p style="color:@(esError ? "red" : "black")">@mensaje</p>
    @if (!esError)
    {
        <p>Cantidad de números que terminan en @digito: @cantidadTerminadosEnDigito</p>
    }
</div>

<a href="Menú-Ejercicios" class="btn btn-outline-success">Volver al Menú Principal</a>

@code {
    private string numerosInput = "";
    private int? digito = null;
    private int cantidadTerminadosEnDigito = 0;
    private string mensaje = "";
    private bool esError = false;

    private void CalcularNumerosTerminadosEnDigito()
    {
        esError = false;
        mensaje = "";

        // Validar si el input está vacío
        if (string.IsNullOrWhiteSpace(numerosInput))
        {
            mensaje = "Por favor, introduce 10 números.";
            esError = true;
            return;
        }

        // Dividir el input y verificar que contenga exactamente 10 números
        string[] numerosString = numerosInput.Split(' ');

        if (numerosString.Length != 10)
        {
            mensaje = "Debes introducir exactamente 10 números separados por espacios.";
            esError = true;
            return;
        }

        // Validar que se haya ingresado un dígito válido
        if (digito == null)
        {
            mensaje = "Por favor, introduce un dígito a buscar entre 0 y 9.";
            esError = true;
            return;
        }

        // Validar que cada entrada sea un número entero
        int[] vectorNumeros = new int[numerosString.Length];
        for (int i = 0; i < numerosString.Length; i++)
        {
            if (!int.TryParse(numerosString[i].Trim(), out vectorNumeros[i]))
            {
                mensaje = $"El valor '{numerosString[i]}' no es un número entero válido.";
                esError = true;
                return;
            }
        }

        // Contar cuántos números terminan en el dígito especificado
        cantidadTerminadosEnDigito = ContarNumerosTerminadosEnDigito(vectorNumeros, (int)digito);
    }

    // Función para contar cuántos números terminan en el dígito especificado
    private int ContarNumerosTerminadosEnDigito(int[] vector, int digito)
    {
        int contador = 0;

        foreach (var numero in vector)
        {
            if (Math.Abs(numero) % 10 == digito) // Verifica si el último dígito es el mismo que 'digito'.
            {
                contador++;
            }
        }

        return contador;
    }

    private void Limpiar()
    {
        numerosInput = "";
        digito = null;
        cantidadTerminadosEnDigito = 0;
        mensaje = "";
        esError = false;
    }
}
